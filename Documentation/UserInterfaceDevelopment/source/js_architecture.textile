h2. Content Module JavaScript Architecture

After reading this guide, you will be able to:

* Understand the structure and ideas of the Content Module JavaScript architecture.

endprologue.

h3. Overall UI Goals

We have set up the following goals to strive for UI-wise:

* Reliable editing
* Predictable UI Behavior
* Immeditate feedback for the user
* Built with the web - for the web

UI concepts should be evaluated against the above goals.

h3. Technical guidelines / goals

When implementing the user interface, we should follow these guidelines on a technical side:

* Take the pragmatic approach
* Augument the frontend website
* No iFrame in the content module
* Browser support >= IE9; in the prototyping phase focus on Firefox
* No polling of data from the server!

h3. CSS Guidelines

Overal Goal:

* Be pragmatic! We strive for solutions which work out-of-the-box in 95% of the cases; and tell the integrator
  how to solve the other 5%. Thus, the integrator has to care to make his CSS work with Phoenix; we do not use a sandbox.

Implementation notes:

* All CSS selectors should be fully lowercase, with @-@ as separator. Example: @t3-ui, t3-breadcrumb-item@
* We use the +t3-+ prefix
* The integrator is never allowed to override +t3-+ and +aloha-+
* The main UI elements have an ID, and a partial reset is used to give us predictable behavior inside them.
* We use *sass*. To install, use +gem install sass+. Then, before modifying CSS, go to css/ and run
  +sass --watch style.scss:style.css+. This will update style.css at every modification of style.scss.

h4. Z-Indexes

The TYPO3 Phoenix UI uses Z-Indexes starting at *10000*.

WARNING: TODO: Formulate some more about the usage of z-indexes.

h3. Naming of main UI parts

The following image shows the main UI parts and the names we use for them.

!images/content/js_architecture/ui_parts.png!

h3. Main architecture

The whole Content Module is built around the *Aloha Blocks*. Blocks are un-editable elements of a website, which are managed by Aloha.
They can appear inside or outside editables, can be nested, and can appear either as inline element (@<span>@) or as block-level element(@<div>@).

Only one block is active at any given time. When a block is *active*, then all its parent blocks are *selected*.
The *block selection* contains the active block as first element and all other selected blocks from innermost to outermost.

Most of the UI changes depending on the current block selection.

h4. UI Updates on Selection Change

The following diagram shows how the UI is changing when the block selection changes:

!images/content/js_architecture/internal_structure_ui_updates.png!

# The phoenixintegration Aloha Plugin (located in @alohaplugins/phoenixintegration/lib/phoenixintegration-plugin.js@) hooks
  into the Aloha event which is triggered whenever the block selection changes. Whenever this event is triggered,
  it calls +T3.Content.Model.BlockSelection.updateSelection()+.
# We need to wrap each Aloha Block with a *SproutCore Block* (later only called Block),
  so we can attach event listeners to it. This wrapping is done by the @BlockManager@
# The @BlockManager@ either returns existing SproutCore Blocks (if the given Aloha Block has already been wrapped),
  or creates a new one.
# Then, the @BlockSelection@ sets its @content@ property, which the UI is bound to. Thus,
  all UI elements which depend on the current block selection are refreshed.

h4. UI updates on property change

When an attribute is modified through the property panel, the following happens:

!images/content/js_architecture/internal_structure_attribute_updates.png!

WARNING: TODO: Document what happens when an *editable* is modified

h4. Saving content

Saving is triggered using @T3.Content.Model.Changes.save()@ and is very straight-forward. For now,
we use ExtDirect to send things back to the server.

h3. Displaying Modal Dialogs

WARNING: TODO - write this

* REST architectural style
* HTML snippets loaded via fixed URLs from server side
* Return Commands (@<a rel="typo3-...." />@)

h4. REST Server Side API

URL +/typo3/content/new+

* +referenceNode+ - Context node path
* +position+ - if @above@, new node will be inserted above @referenceNode@, if @below@, otherwise.

URL +/typo3/content/create+

* all options from @/typo3/content/new@
* +type+ - TYPO3CR Node Type to be created

h4. Return Commands

Command +created-new-content+:
<html>
	<a rel="typo3-created-new-content"
		data-page="/sites/phoenixdemotypo3org/homepage@user-admin"
		href="/sites/phoenixdemotypo3org/homepage/main/4e1ef025442f5@user-admin">
		Goto New Content
	</a>
</html>

* +href+ Context node path of newly created content
* +data-page+ Context node path of enclosing page

WARNING: TODO: should also include the URL of the nearest page, maybe even in HREF?

h3. Changelog

* July 11, 2011: Initial version by "Sebastian Kurf√ºrst":credits.html#skurfuerst
