# TYPO3.Neos:ContentCase inherits TYPO3.TypoScript:Case and overrides the default case
# with a catch-all condition for the default case, setting the type variable to
# the name of the current nodes' node type
#
prototype(TYPO3.Neos:ContentCase) < prototype(TYPO3.TypoScript:Case) {
	default {
		@position = 'end'
		condition = ${true}
		type = ${q(node).property('_nodeType.name')}
	}
}

# TYPO3.Neos:Template makes the current node available in addition to the default
# TYPO3.TypoScript:Template properties
#
prototype(TYPO3.Neos:Template) < prototype(TYPO3.TypoScript:Template) {
	node = ${node}
}

prototype(TYPO3.Neos:PrimaryContent) < prototype(TYPO3.TypoScript:Case) {
	default {
		condition = ${true}
		type = 'TYPO3.Neos:ContentCollection'
		@position = 'end'
	}
}

# Default case for ContentCollection TS Object
#
prototype(TYPO3.Neos:ContentCollection) < prototype(TYPO3.TypoScript:Collection) {
	@class = 'TYPO3\\Neos\\TypoScript\\ContentCollectionImplementation'

	nodePath = 'to-be-set-by-user'

		# To enable direct rendering of a ContentCollection we check if the current node is a
		# content collection already or if the child nodes of a content collection specified by
		# nodePath should be rendered
	collection = ${q(node).is('[instanceof TYPO3.Neos:ContentCollection]') ? q(node).children() : q(node).children(this.nodePath).children()}

	itemName = 'node'
	itemRenderer = TYPO3.Neos:ContentCase
}

# TYPO3.Neos:Page is the default object used for rendering in most sites
#
prototype(TYPO3.Neos:Page) < prototype(TYPO3.TypoScript:Array) {

	doctype = '<!DOCTYPE html>'
	doctype.@position = 'start 100'

	# Only the opening html tag for the page. This is done to avoid deep nesting of TypoScript paths for integrators.
	htmlTag = TYPO3.TypoScript:Tag {
		@position = 'start'
		tagName = 'html'
		omitClosingTag = TRUE

		attributes {
			version = 'HTML+RDFa 1.1'
			xmlns = 'http://www.w3.org/1999/xhtml'
			xmlns:typo3 = 'http://www.typo3.org/ns/2012/Flow/Packages/Neos/Content/'
			xmlns:xsd = 'http://www.w3.org/2001/XMLSchema#'
		}
	}

	headerComment = Template {
		@position = 'after htmlTag 10'
		templatePath = 'resource://TYPO3.Neos/Private/Templates/TypoScriptObjects/NeosLicenseHeader.html'
	}

	# The opening head tag for the page. This is done to avoid deep nesting of TypoScript paths for integrators.
	headTag = TYPO3.TypoScript:Tag {
		@position = '10'
		tagName = 'head'
		omitClosingTag = TRUE
	}

	# The content of the head tag, integrators can add their own head content in this array.
	head = TYPO3.TypoScript:Array
	head {
		@position = 'after headTag'

		characterSetMetaTag = TYPO3.TypoScript:Tag {
			@position = '10'
			tagName = 'meta'
			attributes {
				charset = 'UTF-8'
			}
		}

		neosBackendHeader = TYPO3.Neos:Template {
			@position = '10000'
			templatePath = 'resource://TYPO3.Neos/Private/Templates/TypoScriptObjects/NeosBackendHeaderData.html'
		}
	}

	closingHeadTag = '</head>'
	closingHeadTag.@position = 'after head'

	# The opening body tag for the page. This is done to avoid deep nesting of TypoScript paths for integrators.
	bodyTag = TYPO3.TypoScript:Tag {
		@position = '20'
		tagName = 'body'
		omitClosingTag = TRUE
	}

	# Required for the backend to work.
	neosBackendDocumentNodeData = TYPO3.Neos:Template {
		@position = 'after bodyTag'
		templatePath = 'resource://TYPO3.Neos/Private/Templates/TypoScriptObjects/NeosBackendDocumentNodeData.html'
	}

	# Content of the body tag. To be defined by the integrator.
	body = Template
	body.@position = '100'

	# Required for the backend to work.
	neosBackendContainer = TYPO3.Neos:Template {
		@position = 'before closingBodyTag'
		templatePath = 'resource://TYPO3.Neos/Private/Templates/TypoScriptObjects/NeosBackendContainer.html'
	}

	closingBodyTag = '</body>'
	closingBodyTag.@position = 'end 100'

	closingHtmlTag = '</html>'
	closingHtmlTag.@position = 'end 200'
}

# TYPO.Neos.Shortcut is given a representation for editing purposes
#
prototype(TYPO3.Neos:Shortcut) < prototype(TYPO3.Neos:Template)
prototype(TYPO3.Neos:Shortcut) {
	templatePath = 'resource://TYPO3.Neos/Private/Templates/TypoScriptObjects/Shortcut.html'

	targetMode = ${q(node).property('targetMode')}
	targetNode = ${q(node).property('targetNode')}
	firstChildNode = ${q(node).children('[instanceof TYPO3.Neos:Document]').get(0)}
	parentNode = ${q(node).parents().get(0)}
}
prototype(TYPO3.Neos:ContentCollection).shortcut {
	condition = ${q(node).is('[instanceof TYPO3.Neos:Shortcut]')}
	type = 'TYPO3.Neos:Shortcut'
}

# TYPO3.Neos:Breadcrumb provides a basic breadcrumb navigation
#
prototype(TYPO3.Neos:Breadcrumb) < prototype(TYPO3.Neos:Template)
prototype(TYPO3.Neos:Breadcrumb) {
	templatePath = 'resource://TYPO3.Neos/Private/Templates/TypoScriptObjects/BreadcrumbMenu.html'
	items = ${q(node).add(q(node).parents())}
}

# TYPO3.Neos:Menu provides basic menu rendering
#
prototype(TYPO3.Neos:Menu) < prototype(TYPO3.Neos:Template)
prototype(TYPO3.Neos:Menu) {
	@class = 'TYPO3\\Neos\\TypoScript\\MenuImplementation'
	templatePath = 'resource://TYPO3.Neos/Private/Templates/TypoScriptObjects/Menu.html'
	items = ${this.items}
}

# Abstract Plugin Implementation
#
prototype(TYPO3.Neos:Plugin).@class = 'TYPO3\\Neos\\TypoScript\\PluginImplementation'

# PluginView Implementation
#
prototype(TYPO3.Neos:PluginView).@class = 'TYPO3\\Neos\\TypoScript\\PluginViewImplementation'

# The root matcher used to start rendering in Neos
#
# The default is to use a render path of "page", unless the requested format is not "html"
# in which case the format string will be used as the render path (with dots replaced by slashes)
#
root = TYPO3.TypoScript:Case
root {
	layout {
		@position = 'end 9997'
		layout = ${q(node).property('layout') != null && q(node).property('layout') != '' ? q(node).property('layout') : q(node).parents('[subpageLayout]').first().property('subpageLayout')}
		condition = ${this.layout != null && this.layout != ''}
		renderPath = ${'/' + this.layout}
	}

	format {
		@position = 'end 9998'
		condition = ${request.format != 'html'}
		renderPath = ${'/' + String.replace(request.format, '.', '/')}
	}

	default {
		@position = 'end 9999'
		condition = ${true}
		renderPath = '/page'
	}
}
