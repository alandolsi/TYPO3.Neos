namespace:cms=TYPO3\TYPO3\TypoScript

# setting up additional Prototype configuration
prototype(TYPO3.TypoScript:CollectionRenderer) {
	collection = ${context.children()}
	itemRenderer = TYPO3.TypoScript:Case
}

prototype(TYPO3.TYPO3:Section) < prototype(TYPO3.TypoScript:CollectionRenderer)
prototype(TYPO3.TYPO3:Section) {
	implementationClassName = 'TYPO3\\TYPO3\\TypoScript\\Section'
	collection = ${context.children(this.getNodePath()).children()}
}

# Catch-all condition for the default case
prototype(TYPO3.TypoScript:Case).matchers.999999999999 {
	condition = ${true}
	type = ${context.property('_contentType')}
}

# HTML TS Object
prototype(TYPO3.TYPO3:Html) < prototype(TYPO3.TypoScript:FluidRenderer)
prototype(TYPO3.TYPO3:Html) {
	templatePath = 'resource://TYPO3.TYPO3/Private/Templates/TypoScriptObjects/HtmlTemplate.html'
	source = ${context.property('source')}
}

# Page TS Object
prototype(TYPO3.TYPO3:Page) < prototype(TYPO3.TypoScript:FluidRenderer)
prototype(TYPO3.TYPO3:Page) {
	templatePath = 'resource://TYPO3.TYPO3/Private/Templates/TypoScriptObjects/PageTemplate.html'
	body = TYPO3.TypoScript:FluidRenderer
	body.title = ${context.property('title')}
	body.nodePath = ${context.property('_path')}
	headerData = TYPO3.TypoScript:TypoScriptArrayRenderer

	backendHeader = TYPO3.TypoScript:FluidRenderer
	backendHeader.templatePath = 'resource://TYPO3.TYPO3/Private/Templates/TypoScriptObjects/Header.html'
	htmlAttributes = ''
}

# Headline TS Object
prototype(TYPO3.TYPO3:Headline) < prototype(TYPO3.TypoScript:FluidRenderer)
prototype(TYPO3.TYPO3:Headline) {
	templatePath = 'resource://TYPO3.TYPO3/Private/Templates/TypoScriptObjects/Headline.html'
	title = ${context.property('title')}
}

# TextWithHeadline TS Object
prototype(TYPO3.TYPO3:Text) < prototype(TYPO3.TYPO3:Headline)
prototype(TYPO3.TYPO3:Text) {
	templatePath = 'resource://TYPO3.TYPO3/Private/Templates/TypoScriptObjects/TextWithHeadline.html'
	text = ${context.property('text')}
}

# TextWithImage TS Object
prototype(TYPO3.TYPO3:TextWithImage) < prototype(TYPO3.TYPO3:Text)
prototype(TYPO3.TYPO3:TextWithImage) {
	templatePath = 'resource://TYPO3.TYPO3/Private/Templates/TypoScriptObjects/TextWithImage.html'
	image = ${context.property('image')}
	position = ${context.property('position')}
}

# Image TS Object
prototype(TYPO3.TYPO3:Image) < prototype(TYPO3.TYPO3:Headline)
prototype(TYPO3.TYPO3:Image) {
	templatePath = 'resource://TYPO3.TYPO3/Private/Templates/TypoScriptObjects/Image.html'
	image = ${context.property('image')}
}

# Breadcrumb TS Object
prototype(TYPO3.TYPO3:Breadcrumb) < prototype(TYPO3.TypoScript:FluidRenderer)
prototype(TYPO3.TYPO3:Breadcrumb) {
	templatePath = 'resource://TYPO3.TYPO3/Private/Templates/TypoScriptObjects/BreadcrumbMenu.html'
	items = ${context.add(context.parents())}
}

# Content Menu TS Object
prototype(TYPO3.TYPO3:Menu) < prototype(TYPO3.TYPO3:MenuRenderer)
prototype(TYPO3.TYPO3:Menu) {
	templatePath = 'resource://TYPO3.TYPO3/Private/Templates/TypoScriptObjects/ContentMenu.html'
	entryLevel = ${context.property('startLevel')}
	entryLevel << 1.cms:toInteger()
	maximumLevels = ${context.property('maximumLevels')}
	maximumLevels << 1.cms:toInteger()
}

# Basic implementation of a flexible MultiColumn element, not exposed directly but inherited by all specific MultiColumn content elements
prototype(TYPO3.TYPO3:MultiColumn) < prototype(TYPO3.TypoScript:FluidRenderer)
prototype(TYPO3.TYPO3:MultiColumn) {
	templatePath = 'resource://TYPO3.TYPO3/Private/Templates/TypoScriptObjects/MultiColumn.html'
	layout = ${context.property('layout')}
	columns = TYPO3.TypoScript:CollectionRenderer
	columns {
		collection = ${context.children('[instanceof TYPO3.TYPO3:Section]')}
		itemRenderer = TYPO3.TYPO3:MultiColumnItem
	}
}

# Abstract render definition for a single content column in a multi column element
prototype(TYPO3.TYPO3:MultiColumnItem) < prototype(TYPO3.TypoScript:FluidRenderer)
prototype(TYPO3.TYPO3:MultiColumnItem) {
	templatePath = 'resource://TYPO3.TYPO3/Private/Templates/TypoScriptObjects/MultiColumnItem.html'
	columnContent = TYPO3.TYPO3:Section
	columnContent {
		nodePath = '.'
		collection = ${context.children()}
	}
}

# Two Column TS Object
prototype(TYPO3.TYPO3:TwoColumn) < prototype(TYPO3.TYPO3:MultiColumn)

# Three Column TS Object
prototype(TYPO3.TYPO3:ThreeColumn) < prototype(TYPO3.TYPO3:MultiColumn)

# Four Column TS Object
prototype(TYPO3.TYPO3:FourColumn) < prototype(TYPO3.TYPO3:MultiColumn)