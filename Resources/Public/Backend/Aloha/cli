#!/usr/bin/env ruby

# == Name
#	cli - Aloha Editor's Command Line Interface
#
# == Synopsis
#	Refer to the README file for usage
#
# == Options
#	-h, --help					Displays help message
#	-v, --version			 Display the version, then exit
#	-q, --quiet				 Output as little as possible, overrides verbose
#	-V, --verbose			 Verbose output
#

require 'optparse'
require 'ostruct'
require 'date'

begin
	require 'rdoc/usage'
	RDOC_INCLUDED = true
rescue LoadError
	RDOC_INCLUDED = false
end

IS_WINDOWS = ENV['windir'] ? true : false
WINDOWS_CLI = `echo $PATH`.strip().eql?('$PATH') ? true : false

class App
	# Remotes
	REMOTE_GIT_URL	= 'http://github.com/alohaeditor/Aloha-Editor.git'
	REMOTE_GIT			= 'aloha'

	# Versioning
	BRANCH_DEV			= 'dev'
	BRANCH_VERSION	= '0.10'
	BRANCH_MASTER		= 'master'

	# ===========================================================================
	# Init Helpers

	# Run a Command
	def run ( command, output=true )
    # Recurse
		if command.kind_of?(Array)
			result = ""
			command.each do |c|
				result = result + run(c,output)
			end
			return result
		end

    # Output
		if output
			puts command + "\n"
		end

    # Windows
    if WINDOWS_CLI
      command_e = command.gsub('"','\\"')
      result = `bash -c "#{command_e}"`
    else
		  result = `#{command}`
		end

    # Output
		if output
			puts result
		end

		# Done
		return result
	end

  # Check if a binary exists
  def bin_exists? (bin)
  	exists = !run("which #{bin}",false).strip.empty?
  	return exists
  end

  # Fail if the binary doesn't exist
  def check_req (req)
    # Recurse
  	if req.kind_of?(Array)
  		req.each do |r|
  			check_req(r)
  		end
  		return true
  	end

    # Check
  	req_exists = bin_exists?(req)
  	unless req_exists
  		abort("CLI requires the following binary which is not installed: #{req}")
  	end

    # Done
  	return true
  end

	# Download a File
	def download ( url, file )
		result = run("curl -L #{url} -o #{file}")
	end

	# Extract a File
	def extract ( dir, file )
		file = file.gsub(dir,'.')
		result = run(["cd #{dir}","tar -xf #{file}","rm -Rf #{file}"])
	end

	# ===========================================================================
	# Init Commands

	# Initialise our CLI
	def initialize
		init_env
	end

	# Initialise our Environment
	def init_env
		# Check for Requirements
		check_req(['mkdir','curl','tar','git','rm','mv'])
	end

	# ===========================================================================
	# Git Helpers

	# Aborts if Changes are Found
	def has_changes
		result = run("git status")
		if result.include? 'Changed but not updated'
			abort("You have un-committed changes that need to be committed before we can proceed.\n#{result}")
		end
	end

	# Check if a Branch Exists
	def branch_exists(branch)
		branches = run("git branch",false)
		regex = Regexp.new('[\\n\\s\\*]+' +	Regexp.escape(branch.to_s) + '\\n')
		result = ((branches =~ regex) ? true : false)
		return result
	end

	# Check if a Branch Exists
	def remote_branch_exists(branch)
		fetch
		branches = run("git branch -all",false)
		regex = Regexp.new('\\/' +	Regexp.escape(branch.to_s) + '\\n')
		result = ((branches =~ regex) ? true : false)
		return result
	end

	# Checkout a Branch
	def checkout(branch)
		if branch_exists(branch)
			run("git checkout #{branch}")
		else
			if remote_branch_exists(branch)
				run("git checkout -b #{branch} #{REMOTE_GIT}/#{branch}")
			else
				run("git branch #{branch}")
			end
		end
	end

	# Apply multiple commands to submodules
	def submodule_foreach(command)
	  # Recursion
		if command.kind_of?(Array)
			result = ""
			command.each do |c|
				result = result + submodule_foreach(c)
			end
			return result
		end

		result = run("git submodule foreach --recursive '" + command + "'")

		return result
	end

	# Check if a Remote Exists
	def remote_exists(remote)
		remotes = run("git remote")
		regex = Regexp.new('[\\n\\s\\*]+' +	Regexp.escape(remote) + '\\n')
		result = ((remotes =~ regex) ? true : false)
		return result
	end

	# Add a Remote
	def remote_add(url,name)
		unless remote_exists(name)
			run("git remote add #{name} #{url}")
			fetch(name)
		end
	end

	# Fetch a Remote
	def fetch(remote="")
		run("git fetch " + remote)
	end

	# Merge
	def merge(base,*args)
		if args.length === 0
			return run("git merge #{base}")
		end

		checkout(base)

		args.each do |branch|
			checkout(branch)
			merge(base)
		end

		checkout(base)
	end

	# Stage Known Files
	def add
		run("git add -u")
	end

	# Push to Origin
	def push(remote='',branch='')
		run("git push "+remote+" "+branch)
	end

	# Pull
	def pull(remote='',branch='')
		run("git pull "+remote+" "+branch)
	end

	# Push to Origin
	def push_all
		run("git push origin --all")
	end

	# Pull From Everywhere
	def pull_all
		run("git pull --all")
	end

	# ===========================================================================
	# Git Handlers

	# ---------------------------------------------------------------------------
	# Checkout

	# Checkout Version Branch
	def version
		checkout(BRANCH_VERSION)
	end

	# Checkout Dev Branch
	def dev
		checkout(BRANCH_DEV)
	end

	# Checkout Master Branch
	def master
		checkout(BRANCH_MASTER)
	end

	# ---------------------------------------------------------------------------
	# Branch

	# Update Branch
	def update_branch(branch)
		checkout(branch)
		update
	end

	# ---------------------------------------------------------------------------
	# Branches

	# Initialise Branches
	def init_branches
		remote_add(REMOTE_GIT_URL,REMOTE_GIT)
		master
		version
		dev
	end

	# Update Branches
	def update_branches
		update_branch(BRANCH_MASTER)
		update_branch(BRANCH_VERSION)
		update_branch(BRANCH_DEV)
	end

	# ---------------------------------------------------------------------------
	# Submodules

	# Plugin Read Url
	def plugin_read_url(url)
		read_url = url.gsub(/^.+?(github.com)./,'http://\\1/')
		return read_url
	end

	# Plugin Write Url
	def plugin_write_url(url)
		write_url = url.gsub(/^https?\:\/\/github.com\//,'git@github.com:/')
		return write_url
	end

	# Add a Plugin
	def plugin(url,name='')
		url = plugin_read_url(url)

		if name.empty?
			name = url.gsub(/^.+?Aloha-Plugin-(\w+)\.git/,'\\1').downcase
		end

		dir = 'src/plugin/'+name

		run("git submodule add #{url} #{dir}")
	end

	# Initialise Submodules
	def init_submodules
		run([
			"git submodule init",
			"git submodule update"
		])

		submodule_foreach([
			"git reset --hard",
			"git remote update",
			"git fetch origin",
			"git checkout master",
			"git submodule init",
			"git submodule update"
		])
	end

	# Update Submodules
	def update_submodules
		run([
			"git submodule init",
			"git submodule update --merge"
		])

		submodule_foreach([
			"git submodule init",
			"git submodule update --merge"
		])
	end

	# Write Submodules
	def write_submodules
		submodule_foreach('sed -i "" -E "s/https?\:\/\/github\.com\//git\@github\.com\:/" .git/config')
	end

	# Read Submodules
	def read_submodules
		submodule_foreach('sed -i "" -E "s/git\@github.com\:/http://github.com\//" .git/config')
	end

	# Add Submodules
	def add_submodules
		submodule_foreach([
			"git add *",
			"git add -u"
		])
	end

	# Commit Submodules
	def commit_submodules(message)
		submodule_foreach([
			"git add *",
			"git add -u",
			"git commit -m \"#{message}\" | echo",
			"git push origin"
		])
	end

	# Branch Submodules
	def branch_submodules(branch)
		submodule_foreach([
			"git branch #{branch}",
			"git checkout #{branch}"
		])
	end

	# Checkout Submodules
	def checkout_submodules(branch)
		submodule_foreach([
			"git checkout #{branch}"
		])
	end

	# Push Submodules
	def push_submodules
		submodule_foreach([
			"git push --all | echo"
		])
	end

	# Upgrade Submodules
	def upgrade_submodules
		run([
			"git submodule init",
			"git submodule update --merge"
		])

		submodule_foreach([
			"git checkout master",
			"git pull --all"
		])
	end

	# Reset Submodules
	def reset_submodules
		submodule_foreach([
			"git reset --hard"
		])
	end

	# ---------------------------------------------------------------------------
	# Utility

	# Give Birth to a New Aloha Editor
	def birth
		puts "Welcome to the Aloha Editor CLI.\nWhat is your repository URL? E.g. git@github.com:balupton/Aloha-Editor.git"
		url = gets.chomp.strip
		run("git init")
		remote_add(url,"origin")
		install
	end

	# Install Aloha Editor
	def install
		init_branches
		init_submodules
	end

	# Update
	def update
		pull
		update_submodules
	end

	# Upgrade Aloha Editor
	def upgrade
		pull
		upgrade_submodules
	end

	# Build Aloha Editor
	def build
		check_req(['node','npm'])
		run([
			"npm install buildr",
			"buildr"
		])
	end

	# ---------------------------------------------------------------------------
	# Deploy

	# Commit
	def commit(message)
		run([
			"git add build src vendor",
			"git add -u",
			"git commit -m \"#{message}\"",
			"git push origin",
			"git fetch"
		])
	end

	# Deploy
	def deploy(base,*args)
		merge(base,*args)
		push
	end

	# Deploy the Changes From Master to Version + Dev
	def deploy_from_master
		version
		merge(BRANCH_MASTER)
		dev
		merge(BRANCH_MASTER)
		master
		push
	end

	# Deploy the Changes From Dev to Version + Master
	def deploy_from_dev
		version
		merge(BRANCH_DEV)
		master
		merge(BRANCH_DEV)
		dev
		push
	end

end

# ===========================================================================
# Booter

class Booter
	VERSION = :'0.0.1'

	attr_reader :options

	def initialize(arguments, stdin)
		@arguments = arguments
		@stdin = stdin

		# Set defaults
		@options = OpenStruct.new
		@options.verbose = false
		@options.quiet = false
		# TO DO - add additional defaults
	end

	# Parse options, check arguments, then process the command
	def run

		if parsed_options? && arguments_valid?

			puts "Start at #{DateTime.now}\n\n" if @options.verbose

			output_options if @options.verbose # [Optional]

			process_arguments
			process_command

			puts "\nFinished at #{DateTime.now}" if @options.verbose

		else
			output_usage
		end

	end

	protected

		# Parse options
		def parsed_options?

			# Specify options
			opts = OptionParser.new
			opts.on('-v', '--version')		{ output_version ; exit 0 }
			opts.on('-h', '--help')			 { output_help }
			opts.on('-V', '--verbose')		{ @options.verbose = true }
			opts.on('-q', '--quiet')			{ @options.quiet = true }
			# TO DO - add additional options

			opts.parse!(@arguments) rescue return false

			process_options
			true
		end

		# Performs post-parse processing on options
		def process_options
			@options.verbose = false if @options.quiet
		end

		def output_options
			puts :"Options:\n"

			@options.marshal_dump.each do |name, val|
				puts "	#{name} = #{val}"
			end
		end

		# True if required arguments were provided
		def arguments_valid?
			# TO DO - implement your real logic here
			true if @arguments.length >= 1
		end

		# Setup the arguments
		def process_arguments
			# TO DO - place in local vars, etc
		end

		def output_help
			output_version
			if RDOC_INCLUDED
				RDoc::usage() #exits app
			else
				puts "No RDoc"
			end
		end

		def output_usage
			if RDOC_INCLUDED
				RDoc::usage(:'usage') # gets usage from comments above
			else
				puts "No RDoc"
			end
		end

		def output_version
			puts "#{File.basename(__FILE__)} version #{VERSION}"
		end

		def process_command
			# Create Application
			app = App.new

			# Extract
			args = @arguments.clone
			command = args.shift.gsub('-','_')


			# Fetch + Execute
			unless app.respond_to?(command)
				abort("Unknown command: #{command}")
			end

			if args.length === 0
				app.send(command)
			else
				app.send(command,*args)
			end
		end

		def process_standard_input
			input = @stdin.read
			# TO DO - process input

			# [Optional]
			#@stdin.each do |line|
			#	# TO DO - process each line
			#end
		end
end

# Create Booter
booter = Booter.new(ARGV, STDIN)
booter.run
